<?php 
/**
* @copyright (c) 2014, rdtecnologia.com.br  
* @license MIT Licence 
*/
 class Util { const PAGE_SIZE = 10; public function getIdade() { $data = '29/08/2008'; list($dia, $mes, $ano) = explode('/', $data); $hoje = mktime(0, 0, 0, date('m'), date('d'), date('Y')); $nascimento = mktime(0, 0, 0, $mes, $dia, $ano); $idade = floor((((($hoje - $nascimento) / 60) / 60) / 24) / 365.25); return $idade; } public static function getFileExtension($fileName) { return substr(strrchr($fileName, '.'), 1); } public static function retirarAcentos($string) { $string = ereg_replace("[^a-zA-Z0-9_.]", "", strtr($string, "áàãâéêíóôõúüçÁÀÃÂÉÊÍÓÔÕÚÜÇ ", "aaaaeeiooouucAAAAEEIOOOUUC_")); return $string; } public static function geraCodRandd() { $cod = rand(9, 9999999999999); ini_set("memory_limit", "64M"); return $cod; } public static function mssqlData($strData = '', $format = 'Y-m-d') { $dataUnix = self::unixDate($strData); return date($format, $dataUnix); } public static function dataUnix($data, $separator = '/') { switch ($separator) { case '/' : $parte = explode('/', $data); $formata = strtotime("{$parte[1]}/{$parte[0]}/{$parte[2]}"); break; case '-' : $arrData = explode('-', $data); $formata = strtotime("{$arrData[1]}/{$arrData[2]}/{$arrData[0]}"); break; } return $formata; } public static function validaEmail($mail) { if (preg_match('/^([[:alnum:]_.-]){3,}@([[:lower:][:digit:]_.-]{3,})(\.[[:lower:]]{2,3})(\.[[:lower:]]{2})?$/', $mail)) { return true; } else { return false; } } public static function strToDb($str) { $str = stripslashes($str); $str = str_replace("'", "''", $str); return $str; } public static function getDataAtual() { return date('Y-m-d H:i:s'); } public static function removerAcentos($var) { $var = ereg_replace("[ÁÀÂÃ]", "A", $var); $var = ereg_replace("[áàâãª]", "a", $var); $var = ereg_replace("[ÉÈÊ]", "E", $var); $var = ereg_replace("[éèê]", "e", $var); $var = ereg_replace("[ÍÌÎ]", "I", $var); $var = ereg_replace("[íìî]", "i", $var); $var = ereg_replace("[ÓÒÔÕ]", "O", $var); $var = ereg_replace("[óòôõº]", "o", $var); $var = ereg_replace("[ÚÙÛ]", "U", $var); $var = ereg_replace("[úùû]", "u", $var); $var = str_replace("Ç", "C", $var); $var = str_replace("ç", "c", $var); return strtoupper($var); } public static function listaimagemRemoveAcentos($str, $enc = "UTF-8") { $acentos = array( 'A' => '/&Agrave;|&Aacute;|&Acirc;|&Atilde;|&Auml;|&Aring;/', 'a' => '/&agrave;|&aacute;|&acirc;|&atilde;|&auml;|&aring;/', 'C' => '/&Ccedil;/', 'c' => '/&ccedil;/', 'E' => '/&Egrave;|&Eacute;|&Ecirc;|&Euml;/', 'e' => '/&egrave;|&eacute;|&ecirc;|&euml;/', 'I' => '/&Igrave;|&Iacute;|&Icirc;|&Iuml;/', 'i' => '/&igrave;|&iacute;|&icirc;|&iuml;/', 'N' => '/&Ntilde;/', 'n' => '/&ntilde;/', 'O' => '/&Ograve;|&Oacute;|&Ocirc;|&Otilde;|&Ouml;/', 'o' => '/&ograve;|&oacute;|&ocirc;|&otilde;|&ouml;/', 'U' => '/&Ugrave;|&Uacute;|&Ucirc;|&Uuml;/', 'u' => '/&ugrave;|&uacute;|&ucirc;|&uuml;/', 'Y' => '/&Yacute;/', 'y' => '/&yacute;|&yuml;/', 'a.' => '/&ordf;/', 'o.' => '/&ordm;/' ); return strtoupper(preg_replace($acentos, array_keys($acentos), htmlentities($str, ENT_NOQUOTES, $enc))); } public static function mssqlMoney($strMoney = null) { if ($strMoney != null) { return (float)trim(str_replace(',', '.', str_replace('.', '', $strMoney)) ); } } function printMoney($strMney = null) { if ($strMney) { return number_format($strMney, 2, ',', '.'); } } public static function utf8EncodeArray($arrDados) { if (is_array($arrDados)) { foreach($arrDados as $key => $value) { echo $value; } return $arrDados; } exit(); } public static function successMsg($strMsg = '') { $arrResponse = array( 'success' => true ); if ($strMsg) { $arrResponse['data'] = $strMsg; } echo json_encode($arrResponse); } public static function failureMsg($strMsg = "") { if ($strMsg) { echo "{ success : false, data : '$strMsg'}"; } else { echo json_encode(array( 'success' => false )); } } public static function getMes($numeroMes = NULL) { if ($numeroMes) { $arrMes = array( '1' => 'Janeiro', '2' => 'Fevereiro', '3' => 'Março', '4' => 'Abril', '5' => 'Maio', '6' => 'Junho', '7' => 'Julho', '8' => 'Agosto', '9' => 'Setembro', '10' => 'Outubro', '11' => 'Novembro', '12' => 'Dezembro' ); return $arrMes[$numeroMes]; } else { return ''; } } public static function valueToUtf8(&$item, $key) { if ($key != 'success') { if ($item != 'true' || $item != 'false') { $item = trim(utf8_encode($item)); } } } public static function parseArrValuesToUtf8(&$arr = array()) { if (! is_array($arr)) { throw new Exception("Passe um array válido!"); } array_walk_recursive($arr, array( self, "valueToUtf8" )); } private static function decodeToUtf8(&$item, $key) { $item = trim(utf8_decode(strip_tags($item))); } public static function decodeArrToUtf8(&$arr = array()) { if (! is_array($arr)) { throw new Exception("Passe um array válido!"); } array_walk_recursive($arr, array( self, "decodeToUtf8" )); } public static function getUserLogado() { return ($_SESSION['cod_func']) ? $_SESSION['cod_func'] : ''; } public static function setUserLogado($userId = '') { if (preg_match('/^[0-9]{5}$/', $userId) === 0) throw new Exception('Usuário inválido!'); if ($userId) $_SESSION['cod_func'] = $userId; } public static function abreviarNome($nome) { $partes_nome = explode(" ", trim($nome)); $total = count($partes_nome); $nome_abrv = ''; $vetor_ignora = array( 'de', 'DE', 'da', 'DA', 'das', 'DAS', 'do', 'DO', 'dos', 'DOS' ); foreach($partes_nome as $indice => $palavras) { if ($indice != 0 and $indice != ($total - 1)) if (in_array($palavras, $vetor_ignora)) { $nome_abrv .= " " . $palavras; } else { $nome_abrv .= " " . strtoupper(substr($palavras, 0, 1)) . "."; } } $abreviado = ucfirst($partes_nome[0]) . " " . $nome_abrv . " " . ucfirst($partes_nome[$total - 1]); return $abreviado; } public static function m2h($mins = 0) { if ($mins < 0) $min = abs($mins); else $min = $mins; $h = floor($min / 60); $m = ($min - ($h * 60)) / 100; $horas = $h + $m; if ($mins < 0) $horas *= - 1; $sep = explode('.', $horas); $h = $sep[0]; if (empty($sep[1])) $sep[1] = 00; $m = $sep[1]; if (strlen($m) < 2) $m = $m . 0; return sprintf('%02d:%02d', $h, $m); } public static function valorPorExtenso($valor = 0) { $singular = array( "centavo", "real", "mil", "milhão", "bilhão", "trilhão", "quatrilhão" ); $plural = array( "centavos", "reais", "mil", "milhões", "bilhões", "trilhões", "quatrilhões" ); $c = array( "", "cem", "duzentos", "trezentos", "quatrocentos", "quinhentos", "seiscentos", "setecentos", "oitocentos", "novecentos" ); $d = array( "", "dez", "vinte", "trinta", "quarenta", "cinquenta", "sessenta", "setenta", "oitenta", "noventa" ); $d10 = array( "dez", "onze", "doze", "treze", "quatorze", "quinze", "dezesseis", "dezesete", "dezoito", "dezenove" ); $u = array( "", "um", "dois", "três", "quatro", "cinco", "seis", "sete", "oito", "nove" ); $z = 0; $valor = number_format($valor, 2, ".", "."); $inteiro = explode(".", $valor); for($i = 0; $i < count($inteiro); $i ++) for($ii = strlen($inteiro[$i]); $ii < 3; $ii ++) $inteiro[$i] = "0" . $inteiro[$i]; $fim = count($inteiro) - ($inteiro[count($inteiro) - 1] > 0 ? 1 : 2); for($i = 0; $i < count($inteiro); $i ++) { $valor = $inteiro[$i]; $rc = (($valor > 100) && ($valor < 200)) ? "cento" : $c[$valor[0]]; $rd = ($valor[1] < 2) ? "" : $d[$valor[1]]; $ru = ($valor > 0) ? (($valor[1] == 1) ? $d10[$valor[2]] : $u[$valor[2]]) : ""; $r = $rc . (($rc && ($rd || $ru)) ? " e " : "") . $rd . (($rd && $ru) ? " e " : "") . $ru; $t = count($inteiro) - 1 - $i; $r .= $r ? " " . ($valor > 1 ? $plural[$t] : $singular[$t]) : ""; if ($valor == "000") $z ++; elseif ($z > 0) $z --; if (($t == 1) && ($z > 0) && ($inteiro[0] > 0)) $r .= (($z > 1) ? " de " : "") . $plural[$t]; if ($r) $rt = $rt . ((($i > 0) && ($i <= $fim) && ($inteiro[0] > 0) && ($z < 1)) ? (($i < $fim) ? ", " : " e ") : " ") . $r; } return ($rt ? $rt : "zero"); } public static function str2Upper($str) { return strtr(strtoupper($str), "àáâãäåæçèéêëìíîïðñòóôõö÷øùüúþÿ", "ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÜÚÞß"); } public static function echoArrJson(array $arrData, $qtdRegistros = 0, $encodeArrToUtf8 = true) { if ($encodeArrToUtf8) { Util::parseArrValuesToUtf8($arrData); } $arrReturn['rows'] = ($arrData) ? $arrData : false; $arrReturn['totalCount'] = $qtdRegistros; echo json_encode($arrReturn); } public static function echoArrJsonSummary(array $arrData, array $arrSummary, $qtdRegistros = 0, $encodeArrToUtf8 = true, $returnArray = false) { if ($encodeArrToUtf8) { Util::parseArrValuesToUtf8($arrData); } $arrReturn['rows'] = $arrData; $arrReturn['summaryData'] = $arrSummary; $arrReturn['totalCount'] = $qtdRegistros; if ($returnArray) { return $arrReturn; } else { echo json_encode($arrReturn); } } public static function echoArrToJsonDetalhar($arrList) { if (! is_array($arrList)) { self::failureMsg(); return; } $arrResult = array( 'success' => true, 'data' => $arrList ); self::parseArrValuesToUtf8($arrResult); echo json_encode($arrResult); } public static function getQtdDias($data) { try { if ($data) { $arrDtFim = explode('/', $data); $arrDataAtual = explode('/', date('d/m/Y')); $dtFim = sprintf('%4d-%2d-%2d', $arrDtFim[2], $arrDtFim[1], $arrDtFim[0]); $dtAtual = sprintf('%4d-%2d-%2d', $arrDataAtual[2], $arrDataAtual[1], $arrDataAtual[0]); return Util::diffDate($dtFim, $dtAtual, 'D'); } else { return 0; } } catch(Exception $e) { throw new Exception($e->getMessage()); } } public static function diffDate($d1, $d2, $type = '', $sep = '-') { $d1 = explode($sep, $d1); $d2 = explode($sep, $d2); switch ($type) { case 'A' : $X = 31104000; break; case 'M' : $X = 2628000; break; case 'D' : $X = 86400; break; case 'H' : $X = 3600; break; case 'MI' : $X = 60; break; default : $X = 1; } return floor(((mktime(0, 0, 0, $d1[1], $d1[2], $d1[0]) - mktime(0, 0, 0, $d2[1], $d2[2], $d2[0])) / $X)); } static function formatarCPF_CNPJ($campo, $formatado = true) { $codigoLimpo = ereg_replace("[' '-./ t]", '', $campo); $tamanho = (strlen($codigoLimpo) - 2); if ($tamanho != 9 && $tamanho != 12) { return false; } if ($formatado) { $mascara = ($tamanho == 9) ? '###.###.###-##' : '##.###.###/####-##'; $indice = - 1; for($i = 0; $i < strlen($mascara); $i ++) { if ($mascara[$i] == '#') $mascara[$i] = $codigoLimpo[++ $indice]; } $retorno = $mascara; } else { $retorno = $codigoLimpo; } return $retorno; } public static function h2m($horas = '') { if (! strpos($horas, ':')) return false; $strHora = explode(':', $horas); $h = (int)$strHora[0]; $i = (int)$strHora[1]; $strMinutos = (($h * 60) + $i); return $strMinutos; } public static function unixDate($date = null) { if (! $date) return false; $date = trim($date); $hourDelimiter = ':'; $hour = 0; $minute = 0; $second = 0; $dateSeparatorPT = '/'; $dateSeparatorEN = '-'; $dateSeparatorPattern = '[/ -]'; $arrDate = split($dateSeparatorPattern, $date); $arrShortDate = array_slice($arrDate, 0, 3); if (strpos($date, $dateSeparatorEN)) $arrShortDate = array_reverse($arrShortDate); list($day, $month, $year) = $arrShortDate; if ($arrDate[3]) { $arrHora = explode($hourDelimiter, $arrDate[3]); list($hour, $minute, $second) = $arrHora; } return mktime($hour, $minute, $second, $month, $day, $year); } public static function getWeekIndex($date = '') { $unixDate = (ctype_digit($date)) ? $date : self::unixDate($date); return (int)date('w', $unixDate); } public static function getIniFimWeek($date = '', $outputFormat = 'd/m/Y', $includeSundayAndSaturday = false) { if (! $date) return; $qtdDiasIniWeek = 1; $qtdDiasFimWeek = 5; if ($includeSundayAndSaturday) { $qtdDiasIniWeek --; $qtdDiasFimWeek ++; } $timestamp = self::unixDate($date); $w = date('w', $timestamp); $ini = (int)$w - $qtdDiasIniWeek; $qtdDiasFim = abs($w - $qtdDiasFimWeek); return array( 'DTINICIAL' => date($outputFormat, strtotime("-$ini days", $timestamp)), 'DTFINAL' => date($outputFormat, strtotime("+$qtdDiasFim days", $timestamp)) ); } public static function getIniFimWeekCLT($date = '', $outputFormat = 'd/m/Y') { if (! $date) return; $qtdDiasIniWeek = 1; $qtdDiasFimWeek = 6; $timestamp = self::unixDate($date); $w = date('w', $timestamp); $ini = (int)$w - $qtdDiasIniWeek; $qtdDiasFim = abs($w - $qtdDiasFimWeek); return array( 'DTINICIAL' => date($outputFormat, strtotime("-$ini days", $timestamp)), 'DTFINAL' => date($outputFormat, strtotime("+$qtdDiasFim days", $timestamp)) ); } public static function getWeekName($weekIndex = '') { if ($weekIndex === '') return false; $weekIndex = (int)$weekIndex; if ($weekIndex > 6 || $weekIndex < 0) return false; $arrWeek[0] = 'Domingo'; $arrWeek[1] = 'Segunda-Feira'; $arrWeek[2] = 'Terça-Feira'; $arrWeek[3] = 'Quarta-Feira'; $arrWeek[4] = 'Quinta-Feira'; $arrWeek[5] = 'Sexta-Feira'; $arrWeek[6] = 'Sábado'; return $arrWeek[$weekIndex]; } public static function toString($str) { $str = trim($str); $str = preg_replace('/\s{2,}/', ' ', $str); $str = str_replace(chr(13), ' ', $str); $str = str_replace(array( "\n", "\r", '<br />' ), array( ' ', ' ', ' ' ), $str); $str = str_replace("'", "", $str); $str = str_replace('"', "", $str); $str = str_replace("\n", " ", $str); $str = strtoupper($str); return $str; } public static function somarHoras(Array $times) { $seconds = 0; foreach($times as $time) { list($g, $i, $s) = explode(':', $time); $seconds += $g * 3600; $seconds += $i * 60; $seconds += $s; } $hours = floor($seconds / 3600); $seconds -= $hours * 3600; $minutes = floor($seconds / 60); $seconds -= $minutes * 60; return sprintf('%s:%s:%s', $hours, $minutes, $seconds); } public static function decodeRelatorioUrl() { return substr($_SERVER['SCRIPT_NAME'], 5); } public static function altenticar($ID) { if (! $ID) { echo ("O usuário <b>id" . $_SESSION['cod_func'] . "</b> não tem permissão para visualizar este módulo do sistema."); exit(); } } private static function _filterFinaisDeSemana($element) { $arrWeekend = array( 0, 6 ); return (bool)(in_array($element['W_INDEX'], $arrWeekend)); } private static function _filterDiasUteis($element) { $arrWeekend = array( 0, 6 ); return (bool)(! in_array($element['W_INDEX'], $arrWeekend)); } public static function getDiasUteis($dtInicial = null, $dtFinal = null, $arrFeriados = null, $returnArray = false) { $dtTtIni = self::unixDate($dtInicial); $dtTtFim = self::unixDate($dtFinal); $arrDates = array(); $ttIni = ($dtTtIni < $dtTtFim) ? $dtTtIni : $dtTtFim; $ttFim = ($dtTtIni > $dtTtFim) ? $dtTtIni : $dtTtFim; $qtdDias = ceil(($ttFim - $ttIni) / 86400); foreach(range(0, $qtdDias) as $dia) { $current = date('d/m/Y', strtotime("+$dia days", $ttIni)); if (is_array($arrFeriados)) { if (in_array($current, $arrFeriados)) continue; } $wIndex = self::getWeekIndex($current); array_push($arrDates, array( 'DATE' => $current, 'W_INDEX' => $wIndex )); } $arrFilteredDays = array_filter($arrDates, array( self, "_filterDiasUteis" )); if ($returnArray) return $arrFilteredDays; else return count($arrFilteredDays); } public static function getArrayDiasUteis($dtInicial = null, $dtFinal = null, $arrFeriados = null) { $arrDiasUteis = self::getDiasUteis($dtInicial, $dtFinal, $arrFeriados, true); $arrDias = array(); if ($arrDiasUteis) { foreach($arrDiasUteis as $dia) { array_push($arrDias, $dia['DATE']); } } return $arrDias; } public static function returnSimNao($value) { return ($value) ? 'Sim' : 'Não'; } public static function getPeriodoMedicao() { if (date('d') < 25) { $dataAnterior = strtotime('-2 month'); $mesAnterior = date('m', $dataAnterior); $anoAnterior = date('Y', $dataAnterior); $dataFimAnterior = strtotime('-1 month'); $mesFimAnterior = date('m', $dataFimAnterior); $anoFimAnterior = date('Y', $dataFimAnterior); $data1 = sprintf('26/%s/%s', $mesAnterior, $anoAnterior); $data2 = sprintf('25/%s/%s', $mesFimAnterior, $anoFimAnterior); } else { $dataAnterior = strtotime('-1 month'); $mesAnterior = date('m', $dataAnterior); $anoAnterior = date('Y', $dataAnterior); $data1 = sprintf('26/%s/%s', $mesAnterior, $anoAnterior); $data2 = sprintf('25/%s/%s', date('m'), date('Y')); } return array( 'DATA_INICIAL' => $data1, 'DATA_FINAL' => $data2 ); } public static function getPeriodoMedicaoDataInicial() { $arrPeriodo = self::getPeriodoMedicao(); return $arrPeriodo['DATA_INICIAL']; } public static function getPeriodoMedicaoDataFinal() { $arrPeriodo = self::getPeriodoMedicao(); return $arrPeriodo['DATA_FINAL']; } public static function arrayPluck($array, $index) { if (! is_array($array)) return array(); $arrReturn = array(); if (is_array($index)) { $auxArray = array(); foreach($array as $arr) { foreach($index as $key) { $auxArray[$key] = $arr[$key]; } $arrReturn[] = $auxArray; $auxArray = array(); } } else { foreach($array as $arr) $arrReturn[] = $arr[$index]; } return $arrReturn; } public static function inMultiArray($elem, $array, $field) { $top = sizeof($array) - 1; $bottom = 0; while ( $bottom <= $top ) { if ($array[$bottom][$field] == $elem) return true; else if (is_array($array[$bottom][$field])) if (self::inMultiArray($elem, ($array[$bottom][$field]))) return true; $bottom ++; } return false; } public static function getLastUtilDay($date = null, $arrFeriados = array()) { $date = (! is_int($date)) ? strtotime("-1 days") : strtotime("-1 days", $date); $isFeriado = false; if ($arrFeriados) { if (in_array($date, $arrFeriados)) { $isFeriado = true; echo date('d/m/Y', $date) . ' é feriado<br>'; } } if (! in_array(self::getWeekIndex($date), array( 0, 6 )) && ! $isFeriado) return $date; else return self::getLastUtilDay($date, $arrFeriados); } public static function putSingleQuotes($string, $separator = '') { if (! empty($separator)) { $replace = "'$separator '"; $string = str_replace($separator, $replace, $string); } return sprintf("'%s'", $string); } } 