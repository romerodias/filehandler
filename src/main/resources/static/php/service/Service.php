<?php 
/**
* @copyright (c) 2014, rdtecnologia.com.br  
* @license MIT Licence 
*/
 class Service { private $cancelUserValidate = false; public function Service($class, $metodo, $argumento) { try { if ($class == 'AuthBLL') $this->cancelUserValidate = true; if(array_key_exists('exporter',$argumento)) { if($argumento['exporter'] == '698dc19d489c4e4db73e28a713eab07b') $this->cancelUserValidate = true; if(array_key_exists('cod_func',$argumento)) Util::setUserLogado($argumento['cod_func']); } if (! $this->cancelUserValidate) AuthBLL::validarSessao(); if (! $class) throw new Exception('Informe a classe desejada'); if (! $metodo) throw new Exception("Informe um método da classe $class"); $invokeClass = new $class(); return $invokeClass->$metodo($argumento); } catch(Exception $e) { $arrReplace = array( '"', "'" ); echo json_encode(array( "success" => false, "data" => utf8_encode(stripslashes(str_replace($arrReplace, '', $e->getMessage()))) )); } } public function __call($method, $arguments) { throw new Exception('O método' . $method . ' não existe!'); } public function helperSet(Array $arrRequest) { echo '<pre>'; $arrClassMethods = get_class_methods($arrRequest['cl']); sort($arrClassMethods); foreach($arrClassMethods as $arr) { if (stristr($arr, 'set')) { echo sprintf('$this->%s($arrRequest[\'%s\']);<br>', $arr, strtoupper(substr($arr, 3))); } } } public function helperDao(Array $arrRequest) { echo '<pre>'; $arrClassMethods = get_class_methods($arrRequest['cl']); sort($arrClassMethods); echo '$arrData = array( <BR>'; foreach($arrClassMethods as $arr) { if (stristr($arr, 'get')) { echo sprintf('\'%s\' => $dto->%s(),<br>', strtoupper(substr($arr, 3)), $arr); } } echo ');'; } } 